module adder (
    input a[16],
    input b[16],
    input alufn_signal[6],
   
    output z[1],
    output v[1],
    output n[1],
    output out[16]
  ) {
  
  sig s[16]; 
  
  always {
    s = 16b0; 

    
    // ADDITION: alufn[0] = 0
    // SUBTRACTION: alufn[0] = 1
    case(alufn_signal[0]){
      0: s = a+b;
      1: s = a-b;
      default: s = 16b0;
  }
    
    // *** N, V, Z LOGIC *** 
    // Negative (N) -> Depends on MSB
    // Overflow (V) -> Check sign of result when two operatnds have same sign 
    // Zero (Z) -> If sum is 0, z = 1 using NOR 
    n = s[15];
    v = (a[15] & (b[15] ^ alufn_signal[0]) & !s[15]) | (!a[15] & !(b[15] ^ alufn_signal[0]) & s[15]); 
    z = ~|s; 
    
    
    out = s;
  }
}
    