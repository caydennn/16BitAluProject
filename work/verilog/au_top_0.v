/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_valuestorer_outA;
  wire [16-1:0] M_valuestorer_outB;
  reg [1-1:0] M_valuestorer_btna;
  reg [1-1:0] M_valuestorer_btnb;
  reg [16-1:0] M_valuestorer_values;
  reg [1-1:0] M_valuestorer_clk;
  reg [1-1:0] M_valuestorer_rst;
  value_store_1 valuestorer (
    .btna(M_valuestorer_btna),
    .btnb(M_valuestorer_btnb),
    .values(M_valuestorer_values),
    .clk(M_valuestorer_clk),
    .rst(M_valuestorer_rst),
    .outA(M_valuestorer_outA),
    .outB(M_valuestorer_outB)
  );
  
  wire [16-1:0] M_myalu_out;
  wire [3-1:0] M_myalu_zvn;
  reg [16-1:0] M_myalu_a;
  reg [16-1:0] M_myalu_b;
  reg [6-1:0] M_myalu_alufn_signal;
  alu_2 myalu (
    .a(M_myalu_a),
    .b(M_myalu_b),
    .alufn_signal(M_myalu_alufn_signal),
    .out(M_myalu_out),
    .zvn(M_myalu_zvn)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_3 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    
    case (M_myalu_zvn[1+0-:1])
      1'h0: begin
        io_sel = 4'hf;
        io_seg = 8'hff;
      end
      1'h1: begin
        io_sel = 4'hb;
        io_seg = 8'h86;
      end
      default: begin
        io_sel = 4'hf;
        io_seg = 8'hff;
      end
    endcase
    M_valuestorer_clk = clk;
    M_valuestorer_btna = io_button[3+0-:1];
    M_valuestorer_btnb = io_button[4+0-:1];
    M_valuestorer_values[0+7-:8] = io_dip[0+7-:8];
    M_valuestorer_values[8+7-:8] = io_dip[8+7-:8];
    M_valuestorer_rst = io_button[2+0-:1];
    M_myalu_alufn_signal = io_dip[16+0+5-:6];
    M_myalu_a = M_valuestorer_outA;
    M_myalu_b = M_valuestorer_outB;
    io_led[16+0+5-:6] = io_dip[16+0+5-:6];
    io_led[0+0+7-:8] = M_myalu_out[0+7-:8];
    io_led[8+0+7-:8] = M_myalu_out[8+7-:8];
  end
endmodule
